Function Get-MsrcCvrfProductVulnerability {
<#
    .SYNOPSIS
        Get product vulnerability details from a CVRF document

    .DESCRIPTION
       CVRF documents next products into several places, including:
       -Vulnerabilities
       -Threats
       -Remediations
       -Product Tree
       This function gathers the details for each product identified in a CVRF document.
       It provides a list of Threats, Remediations and CVSS Score Sets for each product.

    .PARAMETER cvrfDocument
        A CVRF document object or objects in XML format

    .EXAMPLE
        Get-MsrcCvrfXMLDocument -ID 2016-Nov | Get-MsrcCvrfProductVulnerability

        Get product vulnerability details from a CVRF document using the pipeline   

    .EXAMPLE
        Get-MsrcCvrfProductVulnerability -cvrfDocument (Get-MsrcCvrfXMLDocument -ID 2016-Nov)

        Get product vulnerability details from a CVRF document using a variable and parameters

#>
[CmdletBinding()]
Param (
    [Parameter(Mandatory,ValueFromPipeline)]
    $cvrfDocument
)
Begin {}
Process {
    $cvrfDocument | 
    ForEach-Object {

        Write-Verbose -Message "Dealing with document:'$($_.cvrfdoc.DocumentTitle)'"
        $doc = $_.cvrfdoc
        $doc.ProductTree.Branch.Branch | 
        ForEach-Object {
            $b = $_

            $b.FullProductName | ForEach-Object {

                [PSCustomObject]@{
                    CvrfAlias   = $doc.DocumentTracking.Identification.Alias
                    CvrfTitle   = $doc.DocumentTitle 
                    BranchName  = $b.Name
                    ProductName = $_.'#text'
                    ProductID   = $_.ProductID
                }
            }

        } | 
        ForEach-Object {
        
            $Remediations  = $Threats = $CVSSScoreSets = @()
            $MaximumSeverity = $RestartRequired = $null
            $o = $_
        
            $doc.Vulnerability | 
            ForEach-Object {
        
                $v = $_
        
                $v.Remediations.Remediation | Where-Object {$_.ProductID -eq $o.ProductID } | 
                ForEach-Object {
        
                    $_ | Add-Member -NotePropertyName VulnerabilityCVE   -NotePropertyValue $v.CVE -Force
                    $_ | Add-Member -NotePropertyName VulnerabilityTitle -NotePropertyValue $v.Title -Force
                    $Remediations += $_
                }
        
                $v.Threats.Threat | Where-Object { $_.ProductID -eq $o.ProductID } | 
                ForEach-Object {
        
                    $_ | Add-Member -NotePropertyName VulnerabilityCVE   -NotePropertyValue $v.CVE -Force
                    $_ | Add-Member -NotePropertyName VulnerabilityTitle -NotePropertyValue $v.Title -Force
                    $Threats += $_
                 }
        
                # Threre's no product id on scoreset????
                # $v.CVSSScoreSets.ScoreSet | Where-Object {$_.ProductID -eq $o.ProductID } | 
                # ForEach-Object {
                #    $_ | Add-Member -NotePropertyName VulnerabilityCVE   -NotePropertyValue $v.CVE -Force
                #    $_ | Add-Member -NotePropertyName VulnerabilityTitle -NotePropertyValue $v.Title -Force
                #    $CVSSScoreSets += $_
                # }
        
                $o | Add-Member -NotePropertyName Remediations  -NotePropertyValue $Remediations  -Force
                $o | Add-Member -NotePropertyName Threats       -NotePropertyValue $Threats       -Force
                # $o | Add-Member -NotePropertyName CVSSScoreSets -NotePropertyValue $CVSSScoreSets -Force
             
            }
        
            $MaximumSeverity = Switch (
                (
                $v.Threats.Threat | 
                Where-Object {$_.ProductID -eq $o.ProductID } |
                Where-Object {$_.Type -eq 'Severity' } 
                ).Description | Select-Object -Unique
            ) {
                'Critical'  { 'Critical'  ; break }
                'Important' { 'Important' ; break }
                'Moderate'  { 'Moderate'  ; break }
                'Low'       { 'Low'       ; break }
                default { 'Unkwown'}
            }
        
            $o | Add-Member -NotePropertyName MaximumSeverity -NotePropertyValue $MaximumSeverity -Force
        
            $RestartRequired = Switch ($Vulnerability.Remediations.Remediation.RestartRequired) {
                'Yes'   { 'Yes'   ; break }
                'Maybe' { 'Maybe' ; break }
                default { 'Unknown' }
            }
        
            $o | Add-Member -NotePropertyName RestartRequired -NotePropertyValue $RestartRequired -Force
        
            $o
        }
    }
}
End {}
}