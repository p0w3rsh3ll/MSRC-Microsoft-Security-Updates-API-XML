Function Get-MsrcCvrfExploitabilityIndex {
<#
    .SYNOPSIS
        Get the exploitability index of vulnerabilities found in CVRF document

    .DESCRIPTION
       This function gathers the Exploitability Index from vulnerabilities in a CVRF document.

    .PARAMETER cvrfDocument
        A CVRF document object or objects in XML format

    .EXAMPLE
        Get-MsrcCvrfXMLDocument -ID 2016-Nov | Get-MsrcCvrfExploitabilityIndex
   
        Get the exploitability index from a CVRF document using the pipeline.
   
    .EXAMPLE

        Get-MsrcCvrfExploitabilityIndex -cvrfDocument (Get-MsrcCvrfXMLDocument -ID 2016-Nov)

        Get the exploitability index from a CVRF document using a variable and parameters
#>
[CmdletBinding()]
Param (
    [Parameter(Mandatory,ValueFromPipeline)]
    $cvrfDocument
)
Begin {}
Process {
    $cvrfDocument | 
    ForEach-Object {

        Write-Verbose -Message "Dealing with document:'$($_.cvrfdoc.DocumentTitle)'"
        $doc = $_.cvrfdoc
        $doc.Vulnerability | 
        ForEach-Object {

            $CVE = $_.CVE
            $productIDs = @($_.ProductStatuses.Status.ProductID)
        
            $_.Threats.Threat |
            ForEach-Object {
                if ($_.Type -eq 'Exploit Status') {
                    $s = [PSCustomObject]@{
                        CVE = $CVE
                        Type = $_.Type
                        ProductID = $productIDs
                        PubliclyDisclosed     = ''
                        Exploited             = ''
                        LatestSoftwareRelease = ''
                        OlderSoftwareRelease  = ''
                        # DenialOfService       = 'N/A'
                    }
                    $_.Description -split ';' | 
                    ForEach-Object {
                        $Name,$Value = $_ -split ':'
                        Switch ($Name) {
                            'Publicly Disclosed'      { $s.PubliclyDisclosed = $(
                                                            Switch($Value) {
                                                            'No' {$false ; break}
                                                            'Yes'{$true  ; break}
                                                            default {'N/A'}
                                                            }) 
                                                        break }
                            'Exploited'               { $s.Exploited = $(
                                                            Switch($Value) {
                                                            'No' {$false ; break}
                                                            'Yes'{$true  ; break}
                                                            default {'N/A'}
                                                            })      
                                                        break }
                            'Latest Software Release' { $s.LatestSoftwareRelease  = $Value ; break }
                            'Older Software Release'  { $s.OlderSoftwareRelease = $Value   ; break }
                            default {}
                        }
                    }

                    $s

                }

            }
        }
    }
}
End {}
}